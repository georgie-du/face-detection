{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","recordings","setRecordings","videoRef","useRef","startButton","stopButton","startRecRef","modelRef","recordingRef","lastDetectionsRec","recorderRef","detectFrame","a","current","stopRec","detect","predictions","foundPerson","i","length","class","console","log","startRec","push","filter","Boolean","slice","Math","max","requestAnimationFrame","MediaRecorder","window","stream","ondataavailable","e","dateTitle","Date","toUTCString","href","URL","createObjectURL","data","previousRecords","start","stop","useEffect","setAttribute","navigator","mediaDevices","getUserMedia","audio","video","srcObject","cocoSsd","model","removeAttribute","error","setup","className","style","width","height","autoPlay","playsInline","muted","ref","role","onClick","map","record","backgroundColor","poster","controls","src","download","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b51e70d9.chunk.js","sourcesContent":["import './App.css';\r\nimport React, { useRef, useEffect, useState } from \"react\";\r\nimport * as cocoSsd from \"@tensorflow-models/coco-ssd\";\r\nimport \"@tensorflow/tfjs\";\r\n\r\nfunction App() {\r\n  const [recordings, setRecordings] = useState([]);\r\n  const videoRef = useRef(null);\r\n  const startButton = useRef(null);\r\n  const stopButton = useRef(null);\r\n  const startRecRef = useRef(false);\r\n  const modelRef = useRef(null);\r\n  const recordingRef = useRef(false);\r\n  const lastDetectionsRec = useRef([]);\r\n  const recorderRef = useRef(null);\r\n\r\n\r\n  useEffect(() => {\r\n    async function setup() {\r\n      startButton.current.setAttribute(\"disabled\", true);\r\n      stopButton.current.setAttribute(\"disabled\", true);\r\n      if (navigator.mediaDevices && navigator.mediaDevices.getUserMedia) {\r\n        try {\r\n          const stream = await navigator.mediaDevices.getUserMedia({\r\n            audio: true,\r\n            video: true\r\n          });\r\n          // console.log('Got MediaStream:', stream);\r\n          window.stream = stream;\r\n          videoRef.current.srcObject = stream;\r\n          //load coco detaset model and assign to reference\r\n          const model = await cocoSsd.load();\r\n          modelRef.current = model;\r\n          startButton.current.removeAttribute(\"disabled\");\r\n        } catch (error) {\r\n          console.error('Error accessing media devices.', error);\r\n        }\r\n      }\r\n    }\r\n    setup();\r\n  }, []);\r\n\r\n  async function detectFrame() {\r\n    if (!startRecRef.current) {\r\n      stopRec();\r\n      return;\r\n    }\r\n    //detect person in the video\r\n    const predictions = await modelRef.current.detect(videoRef.current);\r\n\r\n    let foundPerson = false;\r\n    for (let i = 0; i < predictions.length; i++) {\r\n      if (predictions[i].class === \"person\") {\r\n        foundPerson = true;\r\n        console.log(predictions[i]);\r\n      }\r\n      // else{\r\n      // print object detected in console\r\n      //   console.log(predictions[i]);\r\n      // }\r\n    }\r\n    //start/stop recording if person detected\r\n    if (foundPerson) {\r\n      startRec();\r\n      lastDetectionsRec.current.push(true);\r\n    } else if (lastDetectionsRec.current.filter(Boolean).length) {\r\n      startRec();\r\n      lastDetectionsRec.current.push(false);\r\n    } else {\r\n      stopRec();\r\n    }\r\n    console.log(lastDetectionsRec.current);\r\n    lastDetectionsRec.current = lastDetectionsRec.current.slice(\r\n      Math.max(lastDetectionsRec.current.length - 9, 0)\r\n    );\r\n    //update animation frame before next repaint(60 times/sec)\r\n    requestAnimationFrame(() => {\r\n      detectFrame();\r\n    });\r\n  }\r\n\r\n  function startRec() {\r\n    if (recordingRef.current) {\r\n      return;\r\n    }\r\n\r\n    recordingRef.current = true;\r\n    console.log(\"start recording\");\r\n\r\n    recorderRef.current = new MediaRecorder(window.stream);\r\n    // timestamp\r\n    recorderRef.current.ondataavailable = function (e) {\r\n      const dateTitle = (new Date().toUTCString());\r\n      console.log(dateTitle);\r\n      const href = URL.createObjectURL(e.data);\r\n      console.log(href);\r\n      setRecordings(previousRecords => {\r\n        return [...previousRecords, { href, dateTitle }];\r\n      });\r\n    };\r\n\r\n    recorderRef.current.start();\r\n  }\r\n\r\n  function stopRec() {\r\n    if (!recordingRef.current) {\r\n      return;\r\n    }\r\n\r\n    recordingRef.current = false;\r\n    recorderRef.current.stop();\r\n    console.log(\"stopped recording\");\r\n    lastDetectionsRec.current = [];\r\n  }\r\n\r\n  return (\r\n    <div className=\"py-3 App-header\">\r\n      <h3 className=\"card-header p-3 my-4 w-100 text-center h3\">Face detection surveillance camera</h3>\r\n      <div>\r\n        <video style={{ width: \"550px\", height: \"350px\" }} className=\"rounded\" autoPlay playsInline muted ref={videoRef} />\r\n      </div>\r\n      <div class=\"btn-toolbar d-flex justify-content-center p-3\" role=\"toolbar\">\r\n        <div className=\"btn-group mr-2\" role=\"group\">\r\n          <button\r\n            className=\"btn btn-warning\"\r\n            onClick={() => {\r\n              startRecRef.current = true;\r\n              stopButton.current.removeAttribute(\"disabled\");\r\n              startButton.current.setAttribute(\"disabled\", true);\r\n              detectFrame();\r\n            }}\r\n            ref={startButton}\r\n          >\r\n            Start\r\n          </button>\r\n        </div>\r\n        <div className=\"btn-group mr-2\" role=\"group\">\r\n          <button\r\n            className=\"btn btn-danger\"\r\n            onClick={() => {\r\n              startRecRef.current = false;\r\n              startButton.current.removeAttribute(\"disabled\");\r\n              stopButton.current.setAttribute(\"disabled\", true);\r\n              stopRec();\r\n            }}\r\n            ref={stopButton}\r\n          >\r\n            Stop\r\n          </button>\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"card-header text-center my-5 h3 w-100 \">Video recordings:</div>\r\n      <div className=\"row container-fluid m-0 w-100 d-flex justify-content-center\">\r\n        {!recordings.length\r\n          ? null\r\n          : recordings.map(record => {\r\n            return (\r\n              <div className=\"card m-3 \" key={record.dateTitle} style={{ backgroundColor: \"#282c34\" }}>\r\n                <div className=\"card-body p-3 m-0 justify-content-center\">\r\n                  <p className=\"card-dateTitle text-muted small\">{record.dateTitle}</p>\r\n                  <video style={{ width: \"500px\", height: \"350px\" }} className=\"rounded d-flex justify-content-center m-auto\" poster=\"https://www.israel21c.org/wp-content/uploads/2020/04/shutterstock_731158624-768x432.jpg\" controls src={record.href} download={record.href} ></video>\r\n                </div>\r\n              </div>\r\n            );\r\n          })}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}